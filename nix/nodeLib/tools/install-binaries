#!/usr/bin/env python
# This script will read the package.json file and create a symlink for each
# item under the `bin` key. The bin can be a string or a dictionary.
# See: https://docs.npmjs.com/files/package.json#bin
import json
import os
from os.path import exists, join, isdir, normpath
import stat
import sys

with open("package.json", "r") as f:
    package = json.load(f)

if "bin" not in package:
    sys.exit(0)

_bin = package["bin"]
package_name = package["name"]

if isinstance(_bin, basestring):
    # This is equivalent to a singleton dictionary where the key is the
    # name of the package.
    name = package_name
    # If the name is namespaced, just grab the basic name.
    if name.startswith("@"):
        if "/" not in name:
            sys.exit("Can't derive a valid package name from {}".format(name))
        name = name.split("/")[1]
    _bin = {name: _bin}
elif not isinstance(_bin, dict):
    # Otherwise it must be a dictionary.
    sys.exit("Expected `bin` key in package.json to point to a string "
             "or a dict, but it is '{}', of type '{}'"
             .format(_bin, type(_bin).__name__))

out_dir = os.environ["out"]

# Create the .bin folder
bin_folder = join(out_dir, "bin")
if not isdir(bin_folder):
    os.makedirs(bin_folder)

print("Creating binaries in {}".format(bin_folder))

for bin_name, bin_path in _bin.items():
    bin_name = (bin_name or "").strip()
    if bin_name == "":
        sys.exit("Blank binary name for package {}".format(pname))
    # Get the absolute path of the script being pointed to.
    bin_abs_path = normpath(join(out_dir, "lib", "node_modules",
                            package["name"], bin_path))
    if not exists(bin_abs_path):
        sys.exit("Package {} version {} declares a binary {} at path {}, "
                 "but there is no such file at that path.".format(
                     package["name"], package["version"], bin_name, bin_path))
    # If a shebang isn't present, add a node shebang.
    with open(bin_abs_path) as f:
        bin_contents = f.read()
        lines = bin_contents.strip().splitlines()
    if len(lines) == 0:
        sys.exit("Bin file {} is empty.".format(bin_name))
    elif not lines[0].strip().startswith("#!"):
        print("Adding node shebang to bin file {}".format(bin_name))
        with open(bin_abs_path, "w") as f:
            f.write("#!/usr/bin/env node\n")
            f.write(bin_contents)

    print("Linking binary {} to {}".format(bin_name, bin_abs_path))
    # Add executable permissions to the binary.
    bin_stats = os.stat(bin_abs_path)
    os.chmod(bin_abs_path, bin_stats.st_mode | stat.S_IEXEC)
    os.symlink(bin_abs_path, join(bin_folder, bin_name))
